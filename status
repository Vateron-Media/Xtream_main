#!/home/xtreamcodes/bin/php/bin/php
<?php

if (posix_getpwuid(posix_geteuid())['name'] == 'root') {
	set_time_limit(0);

	if ($argc) {
		$rReload = false;
		$rFirstRun = false;

		if (isset($argv[1])) {
			$rFirstRun = true;
		}

		require str_replace('\\', '/', dirname($argv[0])) . '/wwwdir/init.php';
		ini_set('display_startup_errors', 1);
		ini_set('display_errors', 1);
		error_reporting(32767);

		if (!$rFirstRun) {
			echo "\n" . 'Status' . "\n" . '------------------------------' . "\n";

			if (isrunning()) {
				echo 'XC_VM is running.' . "\n\n";
			} else {
				echo 'XC_VM is not running.' . "\n\n";
			}
		} else {
			echo "\n";
		}

		$rServers = ServerInfo();

		shell_exec('sudo chmod 0660 ' . MAIN_DIR . 'bin/php/sockets/*');
		shell_exec('sudo chmod 0771 ' . MAIN_DIR . 'bin/daemons.sh');
		shell_exec('sudo chown -R xtreamcodes:xtreamcodes ' . MAIN_DIR . 'config');
		shell_exec("sudo echo 'net.ipv4.ip_unprivileged_port_start=0' > /etc/sysctl.d/50-allports-nonroot.conf && sudo sysctl --system 2> /dev/null");
		$rSSLConfig = file_get_contents(MAIN_DIR . 'bin/nginx/conf/ssl.conf');

		if (stripos($rSSLConfig, "\n" . 'ssl_stapling on;' . "\n" . 'ssl_stapling_verify on;') !== false || stripos($rSSLConfig, "\r\n" . 'ssl_stapling on;' . "\r\n" . 'ssl_stapling_verify on;') !== false) {
			file_put_contents(MAIN_DIR . 'bin/nginx/conf/ssl.conf', str_replace("\r\n" . 'ssl_stapling on;' . "\r\n" . 'ssl_stapling_verify on;', '', str_replace("\n" . 'ssl_stapling on;' . "\n" . 'ssl_stapling_verify on;', '', $rSSLConfig)));
			$rReload = true;
		}

		// foreach (array('http', 'https') as $rType) {
		// 	$rPortConfig = file_get_contents(MAIN_DIR . 'bin/nginx/ports/' . $rType . '.conf');

		// 	if (stripos($rPortConfig, ' reuseport') !== false) {
		// 		file_put_contents(MAIN_DIR . 'bin/nginx/ports/' . $rType . '.conf', str_replace(' reuseport', '', $rPortConfig));
		// 		$rReload = true;
		// 	}
		// }

		if ($rReload) {
			exec('sudo -u xtreamcodes ' . MAIN_DIR . 'bin/nginx/sbin/nginx -s reload');
			exec('sudo service xtreamcodes restart');
		}

		$rCrons = array();
		if (file_exists(CRON_PATH . 'root_signals.php')) {
			$rCrons[] = '* * * * * ' . PHP_BIN . ' ' . CRON_PATH . 'root_signals.php # XC_VM';
		}
		// if (file_exists(CRON_PATH . 'root_mysql.php')) {
		// 	$rCrons[] = '* * * * * ' . PHP_BIN . ' ' . CRON_PATH . 'root_mysql.php # XC_VM';
		// }

		$rWrite = false;
		exec('sudo crontab -l', $rOutput);

		foreach ($rCrons as $rCron) {
			if (!in_array($rCron, $rOutput)) {
				$rOutput[] = $rCron;
				$rWrite = true;
			}
		}

		if ($rWrite) {
			$rCronFile = tempnam(TMP_PATH, 'crontab');
			file_put_contents($rCronFile, implode("\n", $rOutput) . "\n");
			exec('sudo chattr -i /var/spool/cron/crontabs/root');
			exec('sudo crontab -r');
			exec('sudo crontab ' . $rCronFile);
			exec('sudo chattr +i /var/spool/cron/crontabs/root');
			echo 'Root crontab installed.' . "\n\n";
		}

		$rFile = file('/etc/systemd/system.conf');
		$db731ba4eed35cdc = false;
		$f4e6be426cb0f059 = false;

		for ($i = 0; $i < count($rFile); $i++) {
			if (substr($rFile[$i], 0, 19) == 'DefaultLimitNOFILE=') {
				$db731ba4eed35cdc = true;
			}

			if (substr($rFile[$i], 0, 23) == 'DefaultLimitNOFILESoft=') {
				$f4e6be426cb0f059 = true;
			}
		}

		if (!($db731ba4eed35cdc && $f4e6be426cb0f059)) {
			echo 'Configuration' . "\n" . '------------------------------' . "\n";
			echo 'Increasing file limit... You need to reboot your system!' . "\n\n";

			if (!$db731ba4eed35cdc) {
				shell_exec('sudo echo "' . "\n" . 'DefaultLimitNOFILE=1048576" >> "/etc/systemd/system.conf"');
				shell_exec('sudo echo "' . "\n" . 'DefaultLimitNOFILE=1048576" >> "/etc/systemd/user.conf"');
			}

			if (!$f4e6be426cb0f059) {
				shell_exec('sudo echo "' . "\n" . 'DefaultLimitNOFILESoft=1048576" >> "/etc/systemd/system.conf"');
				shell_exec('sudo echo "' . "\n" . 'DefaultLimitNOFILESoft=1048576" >> "/etc/systemd/user.conf"');
			}
		}

		if ($rServers[SERVER_ID]['is_main']) {
			// foreach ($rServers as $rServerID => $rServerArray) {
			// 	$ipTV_db->query('DELETE FROM `signals` WHERE `custom_data` = ?;', json_encode(array('action' => 'update_binaries')));
			// 	$ipTV_db->query('INSERT INTO `signals`(`server_id`, `time`, `custom_data`) VALUES(?, ?, ?);', $rServerID, time(), json_encode(array('action' => 'update_binaries')));
			// }

			$rConfig = file_get_contents(MAIN_DIR . 'bin/redis/redis.conf');
			if (stripos($rConfig, "\n" . 'save 60 1000') === false) {
				$rWrite = true;
				$rConfig .= "\n" . 'save 60 1000';
				$rConfig = str_replace('stop-writes-on-bgsave-error yes', 'stop-writes-on-bgsave-error no', $rConfig);
				echo 'Turning Redis Snapshots On!' . "\n\n";
			}

			if (stripos($rConfig, "\n" . 'save 60 1000') === false) {
				$rWrite = true;
				$rConfig .= "\n" . 'save 60 1000';
				echo 'Turning Redis Snapshots On' . "\n\n";
			}

			if (stripos($rConfig, 'stop-writes-on-bgsave-error yes') !== false) {
				$rWrite = true;
				$rConfig = str_replace('stop-writes-on-bgsave-error yes', 'stop-writes-on-bgsave-error no', $rConfig);
				echo 'Disabling failed write lock on Redis' . "\n\n";
			}

			if (stripos($rConfig, "\n" . 'server-threads') === false) {
				$rWrite = true;
				$rConfig .= "\n" . 'server-threads 4' . "\n" . 'server-thread-affinity true';
				echo 'Enabling multithreading on Redis' . "\n\n";
			}

			$rPassword = trim(explode("\n", explode("\n" . 'requirepass ', $rConfig)[1])[0]);

			if ($rPassword == '#PASSWORD#') {
				$rWrite = true;
				$rPassword = ipTV_lib::generateString(512);
				$rConfig = str_replace('#PASSWORD#', $rPassword, $rConfig);
				echo 'Generating a new Redis password' . "\n\n";
			}

			if ($rWrite) {
				file_put_contents(MAIN_DIR . 'bin/redis/redis.conf', $rConfig);
			}

			$ipTV_db->query("SELECT * FROM `settings` WHERE `name` = 'redis_password'");

			if ($ipTV_db->get_row()['value'] != $rPassword) {
				echo 'Updating Redis password in database' . "\n";
				ipTV_lib::setSettings(["redis_password" => $rPassword]);
			}
		}

		if (!$rFirstRun && $rServers[SERVER_ID]['is_main']) {
			$ipTV_db->query('UPDATE `streaming_servers` SET `is_main` = 0 WHERE `id` <> ?;', SERVER_ID);
			$ipTV_db->query('UPDATE `streaming_servers` SET `is_main` = 1 WHERE `id` = ?;', SERVER_ID);

			if (stripos(ipTV_lib::$settings['server_name'], 'xtream') !== false || stripos(ipTV_lib::$settings['server_name'], 'zapx') !== false || stripos(ipTV_lib::$settings['server_name'], 'streamcreed') !== false) {
				ipTV_lib::setSettings(["server_name" => "XC_VM"]);
			}

			echo 'Servers' . "\n" . '------------------------------' . "\n";
			$rOffline = 0;

			foreach ($rServers as $rServerID => $rServer) {
				if ($rServerID != SERVER_ID) {
					if (!$rServer['server_online'] && $rServer['enabled'] && $rServer['status'] != 3 && $rServer['status'] != 5) {
						echo 'Server #' . $rServerID . ' - ' . $rServer['server_ip'] . ' - Down since: ' . (($rServer['last_check_ago'] ? date('Y-m-d H:i:s', $rServer['last_check_ago']) : 'Always')) . "\n";
						$rOffline++;
					}
				}
			}

			if ($rOffline == 0) {
				echo 'All servers are Online and reporting back to XC_VM!' . "\n\n";
			} else {
				echo "\n";
			}

			echo 'Installed Version: ' . $rServers[SERVER_ID]['script_version'] . "\n" . '------------------------------' . "\n";
			$Df0cfbe079756478 = 0;

			foreach ($rServers as $rServerID => $rServer) {
				if ($rServerID != SERVER_ID) {
					if ($rServer['server_type'] == 0 && $rServer['script_version'] && $rServer['script_version'] != $rServers[SERVER_ID]['script_version']) {
						echo 'Server #' . $rServerID . ' - ' . $rServer['server_ip'] . ' - Running v' . $rServer['script_version'] . "\n";
						$Df0cfbe079756478++;
					}
				}
			}

			if ($Df0cfbe079756478 == 0) {
				echo 'All servers are up to date!' . "\n\n";
			} else {
				echo "\n";
			}
		}

		$ipTV_db->query('UPDATE `streaming_servers` SET `script_version` = ? WHERE `id` = ?;', SCRIPT_VERSION, SERVER_ID);
	} else {
		exit(0);
	}
} else {
	exit('Please run as root!' . "\n");
}

function isrunning() {
	$rNginx = 0;
	exec('ps -fp $(pgrep -u xtreamcodes 2>/dev/null) 2>/dev/null', $rOutput, $rReturnVar);

	foreach ($rOutput as $rProcess) {
		$rSplit = explode(' ', preg_replace('!\\s+!', ' ', trim($rProcess)));

		if (!($rSplit[8] == 'nginx:' && $rSplit[9] == 'master')) {
		} else {
			$rNginx++;
		}
	}

	return 0 < $rNginx;
}

function ServerInfo() {
	global $ipTV_db;
	$ipTV_db->query('SELECT * FROM `streaming_servers`');
	$rServers = array();
	$rOnlineStatus = array(1);

	foreach ($ipTV_db->get_rows() as $rRow) {
		if (empty($rRow['domain_name'])) {
			$rURL = escapeshellcmd($rRow['server_ip']);
		} else {
			$rURL = str_replace(array('http://', '/', 'https://'), '', escapeshellcmd(explode(',', $rRow['domain_name'])[0]));
		}

		if ($rRow['enable_https'] == 1) {
			$rProtocol = 'https';
		} else {
			$rProtocol = 'http';
		}

		$rPort = ($rProtocol == 'http' ? intval($rRow['http_broadcast_port']) : intval($rRow['https_broadcast_port']));
		$rRow['site_url'] = $rProtocol . '://' . $rURL . ':' . $rPort . '/';

		if ($rRow['server_type'] == 1) {
			$rLastCheckTime = 180;
		} else {
			$rLastCheckTime = 90;
		}

		$rRow['server_online'] = $rRow['enabled'] && in_array($rRow['status'], $rOnlineStatus) && time() - $rRow['last_check_ago'] <= $rLastCheckTime || SERVER_ID == $rRow['id'];
		$rServers[intval($rRow['id'])] = $rRow;
	}

	return $rServers;
}
